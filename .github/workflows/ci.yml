name: CI

on:
  push:
    branches:
      - master
    tags:
      - "v*"
  pull_request:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: drndos/spoolman
  HELM_NAME: drndos/spoolman/helm/spoolman

jobs:
  #
  # Linting
  #
  style:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: "3.9"

      - name: Install pre-commit
        run: pip install pre-commit==3.3.3

      - name: Run pre-commit
        run: pre-commit run --all-files
  #
  # Build the Spoolman client for baking into the docker images
  # This is done on native hardware to speed things up, vite is very slow on emulated hardware
  #
  build-client:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Install node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: "3.9"

      - name: Export requirements
        run: |
          pip install pdm
          pdm export -o requirements.txt --without-hashes

      - name: Install client dependencies
        run: |
          cd client
          npm ci

      - name: Build
        run: |
          cd client
          rm -f .env && echo "VITE_APIURL=/api/v1" > .env.production
          npm run build

      - name: Write build info
        run: |
          echo "GIT_COMMIT=$(git rev-parse --short HEAD)" > build.txt
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> build.txt

      # Remove client source and keep only the built dist
      - name: Clean
        run: |
          mv client/dist dist
          rm -rf client
          mkdir client
          mv dist client/dist
          rm -rf .git
          rm -rf .venv

      - name: Fix permissions
        run: |
          chmod +x scripts/*.sh

      - name: Upload client Spoolman artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: client
          path: client/dist

      - name: Upload full Spoolman artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          include-hidden-files: true
          name: spoolman
          path: .
  #
  # Release image if tests pass
  # Don't run this for pull requests
  #
  publish-images:
    if: ${{ github.event_name != 'pull_request' }}
    needs: [style, build-client]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Download client
        uses: actions/download-artifact@v4.1.7
        with:
          name: client
          path: client/dist

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Log in to the Github Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=edge
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Store git commit and build date
        run: |
          echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_ENV"

      - name: Build and push Docker images
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_COMMIT
            BUILD_DATE
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-amd64
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-arm64
  publish-helm:
    if: ${{ github.event_name != 'pull_request' }}
    name: Build helm package & push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package Helm Chart
        run: |
          helm package helm/spoolman --destination ./

      # Step 6: Push the Helm Chart to GHCR
      - name: Push Helm Chart to GHCR
        run: |
          CHART_NAME=$(helm show chart helm/spoolman | grep '^name:' | awk '{print $2}')
          CHART_VERSION=$(helm show chart helm/spoolman | grep '^version:' | awk '{print $2}')
          CHART_FILE="${CHART_NAME}-${CHART_VERSION}.tgz"
          echo "Pushing chart: $CHART_FILE"

          # Push chart to GHCR
          helm push "$CHART_FILE" oci://ghcr.io/${{ env.IMAGE_NAME }}/helm
